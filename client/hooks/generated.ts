/* eslint-disable */
// DO NOT EDIT THIS FILE
// Generated by @graphql-codegen/cli using:
// (npm|yarn|pnpm) run generate
import {
  useMutation,
  UseMutationOptions,
  useQuery,
  UseQueryOptions,
} from 'react-query'
import { fetcher } from '@lib/fetcher'
export type Maybe<T> = T | null
export type InputMaybe<T> = Maybe<T>
export type Exact<T extends { [key: string]: unknown }> = {
  [K in keyof T]: T[K]
}
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & {
  [SubKey in K]?: Maybe<T[SubKey]>
}
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & {
  [SubKey in K]: Maybe<T[SubKey]>
}
// Generated on 15.12.2021 09:49

/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string
  String: string
  Boolean: boolean
  Int: number
  Float: number
  /**
   * The `DateTime` scalar type represents a date and time in the UTC
   * timezone. The DateTime appears in a JSON response as an ISO8601 formatted
   * string, including UTC timezone ("Z"). The parsed date and time string will
   * be converted to UTC if there is an offset.
   */
  DateTime: any
}

/** Inputs for Adding a Project. */
export type AddProjectInputs = {
  endDate: Scalars['String']
  startDate: Scalars['String']
  title: Scalars['String']
}

/** Inputs for Archiving a Project. */
export type ArchiveProjectInputs = {
  id: Scalars['String']
}

/** Authentication Payload */
export type AuthenticationPayload = {
  __typename?: 'AuthenticationPayload'
  data?: Maybe<Session>
  errors?: Maybe<Array<Maybe<ErrorType>>>
}

/** Inputs for Editing a Project. */
export type EditProjectInputs = {
  endDate?: InputMaybe<Scalars['String']>
  id: Scalars['String']
  startDate?: InputMaybe<Scalars['String']>
  status?: InputMaybe<ProjectStatus>
  title?: InputMaybe<Scalars['String']>
}

/** Mutation ErrorType. */
export type ErrorType = {
  __typename?: 'ErrorType'
  /** Field in which error occurred on. */
  field: Scalars['String']
  /** Validation error message for corresponding field. */
  message: Scalars['String']
}

/** Project */
export type Project = {
  __typename?: 'Project'
  /** Date project was archived. */
  archivedAt?: Maybe<Scalars['DateTime']>
  /** Date project was created. */
  createdAt: Scalars['DateTime']
  /** Date project was deleted. */
  deletedAt?: Maybe<Scalars['DateTime']>
  /** Project end date. */
  endDate: Scalars['DateTime']
  id: Scalars['ID']
  /** Date user was last modified. */
  modifiedAt: Scalars['DateTime']
  /** Project owner. */
  owner: User
  /** Project start date. */
  startDate: Scalars['DateTime']
  /** Project status. */
  status: ProjectStatus
  /** Project title. */
  title: Scalars['String']
}

/** Project Payload */
export type ProjectPayload = {
  __typename?: 'ProjectPayload'
  data?: Maybe<Project>
  errors?: Maybe<Array<Maybe<ErrorType>>>
}

/** Status of a Project */
export enum ProjectStatus {
  /** Archived state */
  Archived = 'ARCHIVED',
  /** Finished state */
  Finished = 'FINISHED',
  /** In Progress state */
  InProgress = 'IN_PROGRESS',
  /** Unstarted state */
  Unstarted = 'UNSTARTED',
}

/** Inputs for Registering a new user. */
export type RegistrationInputs = {
  email: Scalars['String']
  firstName: Scalars['String']
  lastName: Scalars['String']
  password: Scalars['String']
  username: Scalars['String']
}

/** Inputs for Removing a Project. */
export type RemoveProjectInputs = {
  id: Scalars['String']
}

export type RootMutationType = {
  __typename?: 'RootMutationType'
  /** Add a Project */
  addProject?: Maybe<ProjectPayload>
  /** Archive a Project */
  archiveProject?: Maybe<ProjectPayload>
  /** Edit a Project */
  editProject?: Maybe<ProjectPayload>
  /** Register a new user account. */
  register?: Maybe<AuthenticationPayload>
  /** Remove a Project */
  removeProject?: Maybe<ProjectPayload>
  /** Sign in a user */
  signIn?: Maybe<AuthenticationPayload>
}

export type RootMutationTypeAddProjectArgs = {
  inputs: AddProjectInputs
}

export type RootMutationTypeArchiveProjectArgs = {
  inputs: ArchiveProjectInputs
}

export type RootMutationTypeEditProjectArgs = {
  inputs: EditProjectInputs
}

export type RootMutationTypeRegisterArgs = {
  inputs: RegistrationInputs
}

export type RootMutationTypeRemoveProjectArgs = {
  inputs: RemoveProjectInputs
}

export type RootMutationTypeSignInArgs = {
  inputs: SignInInputs
}

export type RootQueryType = {
  __typename?: 'RootQueryType'
  /** Get the currently signed in user. */
  me?: Maybe<User>
  /** Get a project. */
  project?: Maybe<Project>
  /** Get all projects. */
  projects?: Maybe<Array<Maybe<Project>>>
}

export type RootQueryTypeProjectArgs = {
  id: Scalars['String']
}

/** User Session */
export type Session = {
  __typename?: 'Session'
  /** A user's session token. */
  token: Scalars['String']
  /** The currently authenticated user. */
  user: User
}

/** Inputs for Authenticating a user. */
export type SignInInputs = {
  password: Scalars['String']
  username: Scalars['String']
}

/** User */
export type User = {
  __typename?: 'User'
  /** Date user was created. */
  createdAt: Scalars['DateTime']
  /** User's email. */
  email: Scalars['String']
  /** User's first name. */
  firstName: Scalars['String']
  id: Scalars['ID']
  /** User's last name. */
  lastName: Scalars['String']
  /** Date user was last modified. */
  modifiedAt: Scalars['DateTime']
  /** User's projects. */
  projects?: Maybe<Array<Maybe<Project>>>
  /** User's username. */
  username: Scalars['String']
}

export type AddProjectVariables = Exact<{
  inputs: AddProjectInputs
}>

export type AddProject = {
  __typename?: 'RootMutationType'
  addProject?:
    | {
        __typename?: 'ProjectPayload'
        data?: { __typename?: 'Project'; id: string } | null | undefined
        errors?:
          | Array<
              | { __typename?: 'ErrorType'; field: string; message: string }
              | null
              | undefined
            >
          | null
          | undefined
      }
    | null
    | undefined
}

export type AllProjectsVariables = Exact<{ [key: string]: never }>

export type AllProjects = {
  __typename?: 'RootQueryType'
  projects?:
    | Array<
        | {
            __typename?: 'Project'
            archivedAt?: any | null | undefined
            createdAt: any
            deletedAt?: any | null | undefined
            endDate: any
            id: string
            modifiedAt: any
            startDate: any
            status: ProjectStatus
            title: string
            owner: { __typename?: 'User'; id: string }
          }
        | null
        | undefined
      >
    | null
    | undefined
}

export type ArchiveProjectVariables = Exact<{
  inputs: ArchiveProjectInputs
}>

export type ArchiveProject = {
  __typename?: 'RootMutationType'
  archiveProject?:
    | {
        __typename?: 'ProjectPayload'
        data?:
          | {
              __typename?: 'Project'
              archivedAt?: any | null | undefined
              id: string
              status: ProjectStatus
            }
          | null
          | undefined
        errors?:
          | Array<
              | { __typename?: 'ErrorType'; field: string; message: string }
              | null
              | undefined
            >
          | null
          | undefined
      }
    | null
    | undefined
}

export type CurrentUserVariables = Exact<{ [key: string]: never }>

export type CurrentUser = {
  __typename?: 'RootQueryType'
  me?:
    | {
        __typename?: 'User'
        createdAt: any
        email: string
        firstName: string
        id: string
        lastName: string
        modifiedAt: any
        username: string
        projects?:
          | Array<{ __typename?: 'Project'; id: string } | null | undefined>
          | null
          | undefined
      }
    | null
    | undefined
}

export type EditProjectVariables = Exact<{
  inputs: EditProjectInputs
}>

export type EditProject = {
  __typename?: 'RootMutationType'
  editProject?:
    | {
        __typename?: 'ProjectPayload'
        data?: { __typename?: 'Project'; id: string } | null | undefined
        errors?:
          | Array<
              | { __typename?: 'ErrorType'; field: string; message: string }
              | null
              | undefined
            >
          | null
          | undefined
      }
    | null
    | undefined
}

export type FindProjectVariables = Exact<{
  id: Scalars['String']
}>

export type FindProject = {
  __typename?: 'RootQueryType'
  project?:
    | {
        __typename?: 'Project'
        archivedAt?: any | null | undefined
        createdAt: any
        endDate: any
        modifiedAt: any
        startDate: any
        status: ProjectStatus
        title: string
        owner: {
          __typename?: 'User'
          firstName: string
          id: string
          lastName: string
        }
      }
    | null
    | undefined
}

export type RegisterNewUserVariables = Exact<{
  inputs: RegistrationInputs
}>

export type RegisterNewUser = {
  __typename?: 'RootMutationType'
  res?:
    | {
        __typename?: 'AuthenticationPayload'
        data?:
          | {
              __typename?: 'Session'
              token: string
              user: {
                __typename?: 'User'
                createdAt: any
                email: string
                firstName: string
                id: string
                lastName: string
                modifiedAt: any
                username: string
              }
            }
          | null
          | undefined
        errors?:
          | Array<
              | { __typename?: 'ErrorType'; field: string; message: string }
              | null
              | undefined
            >
          | null
          | undefined
      }
    | null
    | undefined
}

export type RemoveProjectVariables = Exact<{
  inputs: RemoveProjectInputs
}>

export type RemoveProject = {
  __typename?: 'RootMutationType'
  removeProject?:
    | {
        __typename?: 'ProjectPayload'
        data?: { __typename?: 'Project'; id: string } | null | undefined
        errors?:
          | Array<
              | { __typename?: 'ErrorType'; field: string; message: string }
              | null
              | undefined
            >
          | null
          | undefined
      }
    | null
    | undefined
}

export type SignInVariables = Exact<{
  inputs: SignInInputs
}>

export type SignIn = {
  __typename?: 'RootMutationType'
  res?:
    | {
        __typename?: 'AuthenticationPayload'
        data?:
          | {
              __typename?: 'Session'
              token: string
              user: {
                __typename?: 'User'
                createdAt: any
                email: string
                firstName: string
                id: string
                lastName: string
                modifiedAt: any
                username: string
              }
            }
          | null
          | undefined
        errors?:
          | Array<
              | { __typename?: 'ErrorType'; field: string; message: string }
              | null
              | undefined
            >
          | null
          | undefined
      }
    | null
    | undefined
}

export const AddProjectDocument = `
    mutation AddProject($inputs: AddProjectInputs!) {
  addProject(inputs: $inputs) {
    data {
      id
    }
    errors {
      field
      message
    }
  }
}
    `
export const useAddProject = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    AddProject,
    TError,
    AddProjectVariables,
    TContext
  >
) =>
  useMutation<AddProject, TError, AddProjectVariables, TContext>(
    'AddProject',
    (variables?: AddProjectVariables) =>
      fetcher<AddProject, AddProjectVariables>(AddProjectDocument, variables)(),
    options
  )
export const AllProjectsDocument = `
    query AllProjects {
  projects {
    archivedAt
    createdAt
    deletedAt
    endDate
    id
    modifiedAt
    owner {
      id
    }
    startDate
    status
    title
  }
}
    `
export const useAllProjects = <TData = AllProjects, TError = unknown>(
  variables?: AllProjectsVariables,
  options?: UseQueryOptions<AllProjects, TError, TData>
) =>
  useQuery<AllProjects, TError, TData>(
    variables === undefined ? ['AllProjects'] : ['AllProjects', variables],
    fetcher<AllProjects, AllProjectsVariables>(AllProjectsDocument, variables),
    options
  )
export const ArchiveProjectDocument = `
    mutation ArchiveProject($inputs: ArchiveProjectInputs!) {
  archiveProject(inputs: $inputs) {
    data {
      archivedAt
      id
      status
    }
    errors {
      field
      message
    }
  }
}
    `
export const useArchiveProject = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    ArchiveProject,
    TError,
    ArchiveProjectVariables,
    TContext
  >
) =>
  useMutation<ArchiveProject, TError, ArchiveProjectVariables, TContext>(
    'ArchiveProject',
    (variables?: ArchiveProjectVariables) =>
      fetcher<ArchiveProject, ArchiveProjectVariables>(
        ArchiveProjectDocument,
        variables
      )(),
    options
  )
export const CurrentUserDocument = `
    query CurrentUser {
  me {
    createdAt
    email
    firstName
    id
    lastName
    modifiedAt
    projects {
      id
    }
    username
  }
}
    `
export const useCurrentUser = <TData = CurrentUser, TError = unknown>(
  variables?: CurrentUserVariables,
  options?: UseQueryOptions<CurrentUser, TError, TData>
) =>
  useQuery<CurrentUser, TError, TData>(
    variables === undefined ? ['CurrentUser'] : ['CurrentUser', variables],
    fetcher<CurrentUser, CurrentUserVariables>(CurrentUserDocument, variables),
    options
  )
export const EditProjectDocument = `
    mutation EditProject($inputs: EditProjectInputs!) {
  editProject(inputs: $inputs) {
    data {
      id
    }
    errors {
      field
      message
    }
  }
}
    `
export const useEditProject = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    EditProject,
    TError,
    EditProjectVariables,
    TContext
  >
) =>
  useMutation<EditProject, TError, EditProjectVariables, TContext>(
    'EditProject',
    (variables?: EditProjectVariables) =>
      fetcher<EditProject, EditProjectVariables>(
        EditProjectDocument,
        variables
      )(),
    options
  )
export const FindProjectDocument = `
    query FindProject($id: String!) {
  project(id: $id) {
    archivedAt
    createdAt
    endDate
    modifiedAt
    owner {
      firstName
      id
      lastName
    }
    startDate
    status
    title
  }
}
    `
export const useFindProject = <TData = FindProject, TError = unknown>(
  variables: FindProjectVariables,
  options?: UseQueryOptions<FindProject, TError, TData>
) =>
  useQuery<FindProject, TError, TData>(
    ['FindProject', variables],
    fetcher<FindProject, FindProjectVariables>(FindProjectDocument, variables),
    options
  )
export const RegisterNewUserDocument = `
    mutation RegisterNewUser($inputs: RegistrationInputs!) {
  res: register(inputs: $inputs) {
    data {
      token
      user {
        createdAt
        email
        firstName
        id
        lastName
        modifiedAt
        username
      }
    }
    errors {
      field
      message
    }
  }
}
    `
export const useRegisterNewUser = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    RegisterNewUser,
    TError,
    RegisterNewUserVariables,
    TContext
  >
) =>
  useMutation<RegisterNewUser, TError, RegisterNewUserVariables, TContext>(
    'RegisterNewUser',
    (variables?: RegisterNewUserVariables) =>
      fetcher<RegisterNewUser, RegisterNewUserVariables>(
        RegisterNewUserDocument,
        variables
      )(),
    options
  )
export const RemoveProjectDocument = `
    mutation RemoveProject($inputs: RemoveProjectInputs!) {
  removeProject(inputs: $inputs) {
    data {
      id
    }
    errors {
      field
      message
    }
  }
}
    `
export const useRemoveProject = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    RemoveProject,
    TError,
    RemoveProjectVariables,
    TContext
  >
) =>
  useMutation<RemoveProject, TError, RemoveProjectVariables, TContext>(
    'RemoveProject',
    (variables?: RemoveProjectVariables) =>
      fetcher<RemoveProject, RemoveProjectVariables>(
        RemoveProjectDocument,
        variables
      )(),
    options
  )
export const SignInDocument = `
    mutation SignIn($inputs: SignInInputs!) {
  res: signIn(inputs: $inputs) {
    data {
      token
      user {
        createdAt
        email
        firstName
        id
        lastName
        modifiedAt
        username
      }
    }
    errors {
      field
      message
    }
  }
}
    `
export const useSignIn = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<SignIn, TError, SignInVariables, TContext>
) =>
  useMutation<SignIn, TError, SignInVariables, TContext>(
    'SignIn',
    (variables?: SignInVariables) =>
      fetcher<SignIn, SignInVariables>(SignInDocument, variables)(),
    options
  )
