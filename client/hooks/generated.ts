/* eslint-disable */
// DO NOT EDIT THIS FILE
// Generated by @graphql-codegen/cli using:
// (npm|yarn|pnpm) run generate
import {
  useQuery,
  UseQueryOptions,
  useMutation,
  UseMutationOptions,
} from 'react-query'
import { fetcher } from '@lib/fetcher'
export type Maybe<T> = T | null
export type InputMaybe<T> = Maybe<T>
export type Exact<T extends { [key: string]: unknown }> = {
  [K in keyof T]: T[K]
}
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & {
  [SubKey in K]?: Maybe<T[SubKey]>
}
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & {
  [SubKey in K]: Maybe<T[SubKey]>
}
// Generated on 13.12.2021 09:54

/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string
  String: string
  Boolean: boolean
  Int: number
  Float: number
}

/** Authentication Payload */
export type AuthenticationPayload = {
  __typename?: 'AuthenticationPayload'
  data?: Maybe<Session>
  errors?: Maybe<Array<Maybe<ErrorType>>>
}

/** Mutation ErrorType. */
export type ErrorType = {
  __typename?: 'ErrorType'
  /** Field in which error occurred on. */
  field: Scalars['String']
  /** Validation error message for corresponding field. */
  message: Scalars['String']
}

/** Inputs for Registering a new user. */
export type RegistrationInputs = {
  email: Scalars['String']
  firstName: Scalars['String']
  lastName: Scalars['String']
  password: Scalars['String']
  username: Scalars['String']
}

export type RootMutationType = {
  __typename?: 'RootMutationType'
  /** Register a new user account. */
  register?: Maybe<AuthenticationPayload>
  /** Sign in a user */
  signIn?: Maybe<AuthenticationPayload>
}

export type RootMutationTypeRegisterArgs = {
  inputs: RegistrationInputs
}

export type RootMutationTypeSignInArgs = {
  inputs: SignInInputs
}

export type RootQueryType = {
  __typename?: 'RootQueryType'
  /** Get the currently signed in user. */
  me?: Maybe<User>
}

/** User Session */
export type Session = {
  __typename?: 'Session'
  /** A user's session token. */
  token: Scalars['String']
  /** The currently authenticated user. */
  user: User
}

/** Inputs for Authenticating a user. */
export type SignInInputs = {
  password: Scalars['String']
  username: Scalars['String']
}

/** User */
export type User = {
  __typename?: 'User'
  /** Date user was created. */
  createdAt: Scalars['String']
  /** User's email. */
  email: Scalars['String']
  /** User's first name. */
  firstName: Scalars['String']
  id: Scalars['ID']
  /** User's last name. */
  lastName: Scalars['String']
  /** Date user was last modified. */
  modifiedAt: Scalars['String']
  /** User's username. */
  username: Scalars['String']
}

export type CurrentUserVariables = Exact<{ [key: string]: never }>

export type CurrentUser = {
  __typename?: 'RootQueryType'
  me?:
    | {
        __typename?: 'User'
        createdAt: string
        email: string
        firstName: string
        id: string
        lastName: string
        modifiedAt: string
        username: string
      }
    | null
    | undefined
}

export type RegisterNewUserVariables = Exact<{
  inputs: RegistrationInputs
}>

export type RegisterNewUser = {
  __typename?: 'RootMutationType'
  res?:
    | {
        __typename?: 'AuthenticationPayload'
        data?:
          | {
              __typename?: 'Session'
              token: string
              user: {
                __typename?: 'User'
                createdAt: string
                email: string
                firstName: string
                id: string
                lastName: string
                modifiedAt: string
                username: string
              }
            }
          | null
          | undefined
        errors?:
          | Array<
              | { __typename?: 'ErrorType'; field: string; message: string }
              | null
              | undefined
            >
          | null
          | undefined
      }
    | null
    | undefined
}

export type SignInVariables = Exact<{
  inputs: SignInInputs
}>

export type SignIn = {
  __typename?: 'RootMutationType'
  res?:
    | {
        __typename?: 'AuthenticationPayload'
        data?:
          | {
              __typename?: 'Session'
              token: string
              user: {
                __typename?: 'User'
                createdAt: string
                email: string
                firstName: string
                id: string
                lastName: string
                modifiedAt: string
                username: string
              }
            }
          | null
          | undefined
        errors?:
          | Array<
              | { __typename?: 'ErrorType'; field: string; message: string }
              | null
              | undefined
            >
          | null
          | undefined
      }
    | null
    | undefined
}

export const CurrentUserDocument = `
    query CurrentUser {
  me {
    createdAt
    email
    firstName
    id
    lastName
    modifiedAt
    username
  }
}
    `
export const useCurrentUser = <TData = CurrentUser, TError = unknown>(
  variables?: CurrentUserVariables,
  options?: UseQueryOptions<CurrentUser, TError, TData>
) =>
  useQuery<CurrentUser, TError, TData>(
    variables === undefined ? ['CurrentUser'] : ['CurrentUser', variables],
    fetcher<CurrentUser, CurrentUserVariables>(CurrentUserDocument, variables),
    options
  )
export const RegisterNewUserDocument = `
    mutation RegisterNewUser($inputs: RegistrationInputs!) {
  res: register(inputs: $inputs) {
    data {
      token
      user {
        createdAt
        email
        firstName
        id
        lastName
        modifiedAt
        username
      }
    }
    errors {
      field
      message
    }
  }
}
    `
export const useRegisterNewUser = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<
    RegisterNewUser,
    TError,
    RegisterNewUserVariables,
    TContext
  >
) =>
  useMutation<RegisterNewUser, TError, RegisterNewUserVariables, TContext>(
    'RegisterNewUser',
    (variables?: RegisterNewUserVariables) =>
      fetcher<RegisterNewUser, RegisterNewUserVariables>(
        RegisterNewUserDocument,
        variables
      )(),
    options
  )
export const SignInDocument = `
    mutation SignIn($inputs: SignInInputs!) {
  res: signIn(inputs: $inputs) {
    data {
      token
      user {
        createdAt
        email
        firstName
        id
        lastName
        modifiedAt
        username
      }
    }
    errors {
      field
      message
    }
  }
}
    `
export const useSignIn = <TError = unknown, TContext = unknown>(
  options?: UseMutationOptions<SignIn, TError, SignInVariables, TContext>
) =>
  useMutation<SignIn, TError, SignInVariables, TContext>(
    'SignIn',
    (variables?: SignInVariables) =>
      fetcher<SignIn, SignInVariables>(SignInDocument, variables)(),
    options
  )
