/* eslint-disable */
// DO NOT EDIT THIS FILE
// Generated by @graphql-codegen/cli using:
// (npm|yarn|pnpm) run generate
import { useQuery, UseQueryOptions } from 'react-query'
import { fetcher } from '@lib/fetcher'
export type Maybe<T> = T | null
export type InputMaybe<T> = Maybe<T>
export type Exact<T extends { [key: string]: unknown }> = {
  [K in keyof T]: T[K]
}
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & {
  [SubKey in K]?: Maybe<T[SubKey]>
}
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & {
  [SubKey in K]: Maybe<T[SubKey]>
}
// Generated on 11.12.2021 16:18

/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string
  String: string
  Boolean: boolean
  Int: number
  Float: number
}

export type RootQueryType = {
  __typename?: 'RootQueryType'
  name?: Maybe<Scalars['String']>
}

export type GetNameVariables = Exact<{ [key: string]: never }>

export type GetName = {
  __typename?: 'RootQueryType'
  name?: string | null | undefined
}

export const GetNameDocument = `
    query GetName {
  name
}
    `
export const useGetName = <TData = GetName, TError = unknown>(
  variables?: GetNameVariables,
  options?: UseQueryOptions<GetName, TError, TData>
) =>
  useQuery<GetName, TError, TData>(
    variables === undefined ? ['GetName'] : ['GetName', variables],
    fetcher<GetName, GetNameVariables>(GetNameDocument, variables),
    options
  )
